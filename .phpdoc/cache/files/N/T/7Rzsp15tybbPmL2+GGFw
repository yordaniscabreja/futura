1688216241
waR3U4bTeM%3Ae77f3f1eac35a42d7a918f1f329ccccb-40d59b34401e7278766d96ed27c980bf
s:8688:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjQwZDU5YjM0NDAxZTcyNzg3NjZkOTZlZDI3Yzk4MGJmIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6InBlcm1pc3Npb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTQ6InZlbmRvci9zcGF0aWUvbGFyYXZlbC1wZXJtaXNzaW9uL2NvbmZpZy9wZXJtaXNzaW9uLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NTU4MDoiPD9waHAKCnJldHVybiBbCgogICAgJ21vZGVscycgPT4gWwoKICAgICAgICAvKgogICAgICAgICAqIFdoZW4gdXNpbmcgdGhlICJIYXNQZXJtaXNzaW9ucyIgdHJhaXQgZnJvbSB0aGlzIHBhY2thZ2UsIHdlIG5lZWQgdG8ga25vdyB3aGljaAogICAgICAgICAqIEVsb3F1ZW50IG1vZGVsIHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIHlvdXIgcGVybWlzc2lvbnMuIE9mIGNvdXJzZSwgaXQKICAgICAgICAgKiBpcyBvZnRlbiBqdXN0IHRoZSAiUGVybWlzc2lvbiIgbW9kZWwgYnV0IHlvdSBtYXkgdXNlIHdoYXRldmVyIHlvdSBsaWtlLgogICAgICAgICAqCiAgICAgICAgICogVGhlIG1vZGVsIHlvdSB3YW50IHRvIHVzZSBhcyBhIFBlcm1pc3Npb24gbW9kZWwgbmVlZHMgdG8gaW1wbGVtZW50IHRoZQogICAgICAgICAqIGBTcGF0aWVcUGVybWlzc2lvblxDb250cmFjdHNcUGVybWlzc2lvbmAgY29udHJhY3QuCiAgICAgICAgICovCgogICAgICAgICdwZXJtaXNzaW9uJyA9PiBTcGF0aWVcUGVybWlzc2lvblxNb2RlbHNcUGVybWlzc2lvbjo6Y2xhc3MsCgogICAgICAgIC8qCiAgICAgICAgICogV2hlbiB1c2luZyB0aGUgIkhhc1JvbGVzIiB0cmFpdCBmcm9tIHRoaXMgcGFja2FnZSwgd2UgbmVlZCB0byBrbm93IHdoaWNoCiAgICAgICAgICogRWxvcXVlbnQgbW9kZWwgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgeW91ciByb2xlcy4gT2YgY291cnNlLCBpdAogICAgICAgICAqIGlzIG9mdGVuIGp1c3QgdGhlICJSb2xlIiBtb2RlbCBidXQgeW91IG1heSB1c2Ugd2hhdGV2ZXIgeW91IGxpa2UuCiAgICAgICAgICoKICAgICAgICAgKiBUaGUgbW9kZWwgeW91IHdhbnQgdG8gdXNlIGFzIGEgUm9sZSBtb2RlbCBuZWVkcyB0byBpbXBsZW1lbnQgdGhlCiAgICAgICAgICogYFNwYXRpZVxQZXJtaXNzaW9uXENvbnRyYWN0c1xSb2xlYCBjb250cmFjdC4KICAgICAgICAgKi8KCiAgICAgICAgJ3JvbGUnID0+IFNwYXRpZVxQZXJtaXNzaW9uXE1vZGVsc1xSb2xlOjpjbGFzcywKCiAgICBdLAoKICAgICd0YWJsZV9uYW1lcycgPT4gWwoKICAgICAgICAvKgogICAgICAgICAqIFdoZW4gdXNpbmcgdGhlICJIYXNSb2xlcyIgdHJhaXQgZnJvbSB0aGlzIHBhY2thZ2UsIHdlIG5lZWQgdG8ga25vdyB3aGljaAogICAgICAgICAqIHRhYmxlIHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIHlvdXIgcm9sZXMuIFdlIGhhdmUgY2hvc2VuIGEgYmFzaWMKICAgICAgICAgKiBkZWZhdWx0IHZhbHVlIGJ1dCB5b3UgbWF5IGVhc2lseSBjaGFuZ2UgaXQgdG8gYW55IHRhYmxlIHlvdSBsaWtlLgogICAgICAgICAqLwoKICAgICAgICAncm9sZXMnID0+ICdyb2xlcycsCgogICAgICAgIC8qCiAgICAgICAgICogV2hlbiB1c2luZyB0aGUgIkhhc1Blcm1pc3Npb25zIiB0cmFpdCBmcm9tIHRoaXMgcGFja2FnZSwgd2UgbmVlZCB0byBrbm93IHdoaWNoCiAgICAgICAgICogdGFibGUgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgeW91ciBwZXJtaXNzaW9ucy4gV2UgaGF2ZSBjaG9zZW4gYSBiYXNpYwogICAgICAgICAqIGRlZmF1bHQgdmFsdWUgYnV0IHlvdSBtYXkgZWFzaWx5IGNoYW5nZSBpdCB0byBhbnkgdGFibGUgeW91IGxpa2UuCiAgICAgICAgICovCgogICAgICAgICdwZXJtaXNzaW9ucycgPT4gJ3Blcm1pc3Npb25zJywKCiAgICAgICAgLyoKICAgICAgICAgKiBXaGVuIHVzaW5nIHRoZSAiSGFzUGVybWlzc2lvbnMiIHRyYWl0IGZyb20gdGhpcyBwYWNrYWdlLCB3ZSBuZWVkIHRvIGtub3cgd2hpY2gKICAgICAgICAgKiB0YWJsZSBzaG91bGQgYmUgdXNlZCB0byByZXRyaWV2ZSB5b3VyIG1vZGVscyBwZXJtaXNzaW9ucy4gV2UgaGF2ZSBjaG9zZW4gYQogICAgICAgICAqIGJhc2ljIGRlZmF1bHQgdmFsdWUgYnV0IHlvdSBtYXkgZWFzaWx5IGNoYW5nZSBpdCB0byBhbnkgdGFibGUgeW91IGxpa2UuCiAgICAgICAgICovCgogICAgICAgICdtb2RlbF9oYXNfcGVybWlzc2lvbnMnID0+ICdtb2RlbF9oYXNfcGVybWlzc2lvbnMnLAoKICAgICAgICAvKgogICAgICAgICAqIFdoZW4gdXNpbmcgdGhlICJIYXNSb2xlcyIgdHJhaXQgZnJvbSB0aGlzIHBhY2thZ2UsIHdlIG5lZWQgdG8ga25vdyB3aGljaAogICAgICAgICAqIHRhYmxlIHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIHlvdXIgbW9kZWxzIHJvbGVzLiBXZSBoYXZlIGNob3NlbiBhCiAgICAgICAgICogYmFzaWMgZGVmYXVsdCB2YWx1ZSBidXQgeW91IG1heSBlYXNpbHkgY2hhbmdlIGl0IHRvIGFueSB0YWJsZSB5b3UgbGlrZS4KICAgICAgICAgKi8KCiAgICAgICAgJ21vZGVsX2hhc19yb2xlcycgPT4gJ21vZGVsX2hhc19yb2xlcycsCgogICAgICAgIC8qCiAgICAgICAgICogV2hlbiB1c2luZyB0aGUgIkhhc1JvbGVzIiB0cmFpdCBmcm9tIHRoaXMgcGFja2FnZSwgd2UgbmVlZCB0byBrbm93IHdoaWNoCiAgICAgICAgICogdGFibGUgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgeW91ciByb2xlcyBwZXJtaXNzaW9ucy4gV2UgaGF2ZSBjaG9zZW4gYQogICAgICAgICAqIGJhc2ljIGRlZmF1bHQgdmFsdWUgYnV0IHlvdSBtYXkgZWFzaWx5IGNoYW5nZSBpdCB0byBhbnkgdGFibGUgeW91IGxpa2UuCiAgICAgICAgICovCgogICAgICAgICdyb2xlX2hhc19wZXJtaXNzaW9ucycgPT4gJ3JvbGVfaGFzX3Blcm1pc3Npb25zJywKICAgIF0sCgogICAgJ2NvbHVtbl9uYW1lcycgPT4gWwogICAgICAgIC8qCiAgICAgICAgICogQ2hhbmdlIHRoaXMgaWYgeW91IHdhbnQgdG8gbmFtZSB0aGUgcmVsYXRlZCBwaXZvdHMgb3RoZXIgdGhhbiBkZWZhdWx0cwogICAgICAgICAqLwogICAgICAgICdyb2xlX3Bpdm90X2tleScgPT4gbnVsbCwgLy9kZWZhdWx0ICdyb2xlX2lkJywKICAgICAgICAncGVybWlzc2lvbl9waXZvdF9rZXknID0+IG51bGwsIC8vZGVmYXVsdCAncGVybWlzc2lvbl9pZCcsCgogICAgICAgIC8qCiAgICAgICAgICogQ2hhbmdlIHRoaXMgaWYgeW91IHdhbnQgdG8gbmFtZSB0aGUgcmVsYXRlZCBtb2RlbCBwcmltYXJ5IGtleSBvdGhlciB0aGFuCiAgICAgICAgICogYG1vZGVsX2lkYC4KICAgICAgICAgKgogICAgICAgICAqIEZvciBleGFtcGxlLCB0aGlzIHdvdWxkIGJlIG5pY2UgaWYgeW91ciBwcmltYXJ5IGtleXMgYXJlIGFsbCBVVUlEcy4gSW4KICAgICAgICAgKiB0aGF0IGNhc2UsIG5hbWUgdGhpcyBgbW9kZWxfdXVpZGAuCiAgICAgICAgICovCgogICAgICAgICdtb2RlbF9tb3JwaF9rZXknID0+ICdtb2RlbF9pZCcsCgogICAgICAgIC8qCiAgICAgICAgICogQ2hhbmdlIHRoaXMgaWYgeW91IHdhbnQgdG8gdXNlIHRoZSB0ZWFtcyBmZWF0dXJlIGFuZCB5b3VyIHJlbGF0ZWQgbW9kZWwncwogICAgICAgICAqIGZvcmVpZ24ga2V5IGlzIG90aGVyIHRoYW4gYHRlYW1faWRgLgogICAgICAgICAqLwoKICAgICAgICAndGVhbV9mb3JlaWduX2tleScgPT4gJ3RlYW1faWQnLAogICAgXSwKCiAgICAvKgogICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIG1ldGhvZCBmb3IgY2hlY2tpbmcgcGVybWlzc2lvbnMgd2lsbCBiZSByZWdpc3RlcmVkIG9uIHRoZSBnYXRlLgogICAgICogU2V0IHRoaXMgdG8gZmFsc2UsIGlmIHlvdSB3YW50IHRvIGltcGxlbWVudCBjdXN0b20gbG9naWMgZm9yIGNoZWNraW5nIHBlcm1pc3Npb25zLgogICAgICovCgogICAgJ3JlZ2lzdGVyX3Blcm1pc3Npb25fY2hlY2tfbWV0aG9kJyA9PiB0cnVlLAoKICAgIC8qCiAgICAgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBwYWNrYWdlIGltcGxlbWVudHMgdGVhbXMgdXNpbmcgdGhlICd0ZWFtX2ZvcmVpZ25fa2V5Jy4gSWYgeW91IHdhbnQKICAgICAqIHRoZSBtaWdyYXRpb25zIHRvIHJlZ2lzdGVyIHRoZSAndGVhbV9mb3JlaWduX2tleScsIHlvdSBtdXN0IHNldCB0aGlzIHRvIHRydWUKICAgICAqIGJlZm9yZSBkb2luZyB0aGUgbWlncmF0aW9uLiBJZiB5b3UgYWxyZWFkeSBkaWQgdGhlIG1pZ3JhdGlvbiB0aGVuIHlvdSBtdXN0IG1ha2UgYSBuZXcKICAgICAqIG1pZ3JhdGlvbiB0byBhbHNvIGFkZCAndGVhbV9mb3JlaWduX2tleScgdG8gJ3JvbGVzJywgJ21vZGVsX2hhc19yb2xlcycsIGFuZAogICAgICogJ21vZGVsX2hhc19wZXJtaXNzaW9ucycodmlldyB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgcGFja2FnZSdzIG1pZ3JhdGlvbiBmaWxlKQogICAgICovCgogICAgJ3RlYW1zJyA9PiBmYWxzZSwKCiAgICAvKgogICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIHJlcXVpcmVkIHBlcm1pc3Npb24gbmFtZXMgYXJlIGFkZGVkIHRvIHRoZSBleGNlcHRpb24KICAgICAqIG1lc3NhZ2UuIFRoaXMgY291bGQgYmUgY29uc2lkZXJlZCBhbiBpbmZvcm1hdGlvbiBsZWFrIGluIHNvbWUgY29udGV4dHMsIHNvCiAgICAgKiB0aGUgZGVmYXVsdCBzZXR0aW5nIGlzIGZhbHNlIGhlcmUgZm9yIG9wdGltdW0gc2FmZXR5LgogICAgICovCgogICAgJ2Rpc3BsYXlfcGVybWlzc2lvbl9pbl9leGNlcHRpb24nID0+IGZhbHNlLAoKICAgIC8qCiAgICAgKiBXaGVuIHNldCB0byB0cnVlLCB0aGUgcmVxdWlyZWQgcm9sZSBuYW1lcyBhcmUgYWRkZWQgdG8gdGhlIGV4Y2VwdGlvbgogICAgICogbWVzc2FnZS4gVGhpcyBjb3VsZCBiZSBjb25zaWRlcmVkIGFuIGluZm9ybWF0aW9uIGxlYWsgaW4gc29tZSBjb250ZXh0cywgc28KICAgICAqIHRoZSBkZWZhdWx0IHNldHRpbmcgaXMgZmFsc2UgaGVyZSBmb3Igb3B0aW11bSBzYWZldHkuCiAgICAgKi8KCiAgICAnZGlzcGxheV9yb2xlX2luX2V4Y2VwdGlvbicgPT4gZmFsc2UsCgogICAgLyoKICAgICAqIEJ5IGRlZmF1bHQgd2lsZGNhcmQgcGVybWlzc2lvbiBsb29rdXBzIGFyZSBkaXNhYmxlZC4KICAgICAqLwoKICAgICdlbmFibGVfd2lsZGNhcmRfcGVybWlzc2lvbicgPT4gZmFsc2UsCgogICAgJ2NhY2hlJyA9PiBbCgogICAgICAgIC8qCiAgICAgICAgICogQnkgZGVmYXVsdCBhbGwgcGVybWlzc2lvbnMgYXJlIGNhY2hlZCBmb3IgMjQgaG91cnMgdG8gc3BlZWQgdXAgcGVyZm9ybWFuY2UuCiAgICAgICAgICogV2hlbiBwZXJtaXNzaW9ucyBvciByb2xlcyBhcmUgdXBkYXRlZCB0aGUgY2FjaGUgaXMgZmx1c2hlZCBhdXRvbWF0aWNhbGx5LgogICAgICAgICAqLwoKICAgICAgICAnZXhwaXJhdGlvbl90aW1lJyA9PiBcRGF0ZUludGVydmFsOjpjcmVhdGVGcm9tRGF0ZVN0cmluZygnMjQgaG91cnMnKSwKCiAgICAgICAgLyoKICAgICAgICAgKiBUaGUgY2FjaGUga2V5IHVzZWQgdG8gc3RvcmUgYWxsIHBlcm1pc3Npb25zLgogICAgICAgICAqLwoKICAgICAgICAna2V5JyA9PiAnc3BhdGllLnBlcm1pc3Npb24uY2FjaGUnLAoKICAgICAgICAvKgogICAgICAgICAqIFlvdSBtYXkgb3B0aW9uYWxseSBpbmRpY2F0ZSBhIHNwZWNpZmljIGNhY2hlIGRyaXZlciB0byB1c2UgZm9yIHBlcm1pc3Npb24gYW5kCiAgICAgICAgICogcm9sZSBjYWNoaW5nIHVzaW5nIGFueSBvZiB0aGUgYHN0b3JlYCBkcml2ZXJzIGxpc3RlZCBpbiB0aGUgY2FjaGUucGhwIGNvbmZpZwogICAgICAgICAqIGZpbGUuIFVzaW5nICdkZWZhdWx0JyBoZXJlIG1lYW5zIHRvIHVzZSB0aGUgYGRlZmF1bHRgIHNldCBpbiBjYWNoZS5waHAuCiAgICAgICAgICovCgogICAgICAgICdzdG9yZScgPT4gJ2RlZmF1bHQnLAogICAgXSwKXTsKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";